name: Reusable CAD Manifest Validator

on:
  workflow_call:
    inputs:
      manifest_path:
        description: 'Path to the manifest file'
        default: 'cad_manifest.json'
        required: false
        type: string
      schema_version:
        description: 'Schema version to use (defaults to latest)'
        default: 'latest'
        required: false
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - run: pip install jsonschema

      - name: Download schema
        run: |
          mkdir -p schema
          SCHEMA_URL="https://itisfoundation.github.io/osparc-manifest-spec/schema/cad_manifest.schema.json"
          if [ "${{ inputs.schema_version }}" != "latest" ]; then
            echo "Using schema version ${{ inputs.schema_version }}"
          else
            echo "Using latest schema version"
          fi
          curl -Lo schema.json $SCHEMA_URL

      - name: Validate
        run: |
          python -c "
import json, jsonschema, sys, os
manifest_path = '${{ inputs.manifest_path }}'
if not os.path.exists(manifest_path):
    print(f'❌ Manifest file not found: {manifest_path}', file=sys.stderr)
    sys.exit(1)
try:
    manifest = json.load(open(manifest_path))
    schema = json.load(open('schema.json'))
    jsonschema.validate(manifest, schema)
    print(f'✅ Manifest {manifest_path} is valid!')
except json.JSONDecodeError as e:
    print(f'❌ Invalid JSON in manifest: {e}', file=sys.stderr)
    sys.exit(1)
except jsonschema.exceptions.ValidationError as e:
    print(f'❌ Validation error: {e}', file=sys.stderr)
    sys.exit(1)
except Exception as e:
    print(f'❌ Error: {e}', file=sys.stderr)
    sys.exit(1)
"
